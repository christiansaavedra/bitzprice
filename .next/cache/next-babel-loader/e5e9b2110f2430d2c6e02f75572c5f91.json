{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nvar _jsxFileName = \"/home/axon/Documentos/cursos/BITZPRICE/pages/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from \"../components/Layout\";\nimport Prices from \"../components/Prices\";\nimport Fetch from \"isomorphic-unfetch\"; // Esto permite hacer fetch desde el cliente\n\nvar Index = function Index(props) {\n  return (// este props agarra lo del getInitialProps\n    __jsx(Layout, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 7\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 8\n      },\n      __self: this\n    }, __jsx(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 9\n      },\n      __self: this\n    }, \"Welcome to BitzPrice\"), __jsx(Prices, {\n      bpi: props.bpi,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 10\n      },\n      __self: this\n    })))\n  );\n};\n\nIndex.getInitialProps = function _callee() {\n  var res, data;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(setInterval(fetch(\"https://api.coindesk.com/v1/bpi/currentprice.json\"), 1000));\n\n        case 2:\n          res = _context.sent;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(res.json());\n\n        case 5:\n          data = _context.sent;\n          return _context.abrupt(\"return\", {\n            bpi: data // bitcoin price index\n\n          });\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default Index;","map":{"version":3,"sources":["/home/axon/Documentos/cursos/BITZPRICE/pages/index.js"],"names":["Layout","Prices","Fetch","Index","props","bpi","getInitialProps","setInterval","fetch","res","json","data"],"mappings":";;;;AAAA,OAAOA,MAAP,MAAmB,sBAAnB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,KAAP,MAAkB,oBAAlB,C,CAAwC;;AAExC,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAAAC,KAAK;AAAA,SACjB;AACA,UAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BADF,EAEE,MAAC,MAAD;AAAQ,MAAA,GAAG,EAAEA,KAAK,CAACC,GAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF;AAFiB;AAAA,CAAnB;;AAUAF,KAAK,CAACG,eAAN,GAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAEJC,WAAW,CAC3BC,KAAK,CAAC,mDAAD,CADsB,EAE3B,IAF2B,CAFP;;AAAA;AAEhBC,UAAAA,GAFgB;AAAA;AAAA,2CAMHA,GAAG,CAACC,IAAJ,EANG;;AAAA;AAMhBC,UAAAA,IANgB;AAAA,2CAQf;AACLN,YAAAA,GAAG,EAAEM,IADA,CACK;;AADL,WARe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAxB;;AAaA,eAAeR,KAAf","sourcesContent":["import Layout from \"../components/Layout\";\nimport Prices from \"../components/Prices\";\nimport Fetch from \"isomorphic-unfetch\"; // Esto permite hacer fetch desde el cliente\n\nconst Index = props => (\n  // este props agarra lo del getInitialProps\n  <Layout>\n    <div>\n      <h1>Welcome to BitzPrice</h1>\n      <Prices bpi={props.bpi} />\n    </div>\n  </Layout>\n);\n\nIndex.getInitialProps = async function() {\n  // getInitialProps es un lifecycle method de Next\n  const res = await setInterval(\n    fetch(\"https://api.coindesk.com/v1/bpi/currentprice.json\"),\n    1000\n  );\n  const data = await res.json();\n\n  return {\n    bpi: data // bitcoin price index\n  };\n};\n\nexport default Index;\n"]},"metadata":{},"sourceType":"module"}